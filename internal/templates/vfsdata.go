// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// FileSystem contains project templates.
var FileSystem = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 11, 18, 15, 6, 44, 15216286, time.UTC),
		},
		"/error.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "error.tmpl",
			modTime:          time.Date(2019, 11, 17, 3, 46, 24, 770694000, time.UTC),
			uncompressedSize: 563,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\xbf\x4e\xc4\x30\x0c\x87\xf7\x3e\x45\xe8\xc0\xc4\xb5\xba\x0d\x41\x52\x06\x66\x24\x04\xbc\x80\x95\xba\x4d\x74\xce\x1f\xc5\xbe\x2b\xa5\xea\xbb\xa3\xde\x89\x81\x8d\x63\x8a\xf2\x59\x9f\x2d\xfb\xa7\x6f\xfa\x64\x65\xce\xa8\x9c\x04\xea\x2a\xbd\x3d\x8a\x20\x8e\x06\x63\x57\xe9\x80\x02\xca\x3a\x28\x8c\x62\x8e\x32\xec\xee\x7f\x60\x84\x80\xe6\xe4\x71\xca\xa9\x88\xb2\x29\x0a\x46\x31\xf5\xe4\x7b\x71\xa6\xc7\x93\xb7\xb8\x3b\x7f\xee\x7c\xf4\xe2\x81\x76\x6c\x81\xd0\xec\xeb\xae\xd2\xe2\x85\xb0\x5b\x96\xe6\x5d\x40\x8e\xfc\x9c\x7a\x5c\x57\xb5\x2c\x4e\x24\x5f\xd0\x07\x7e\x8a\xfa\x55\xd6\xed\xc5\xaa\x34\xf9\x78\x50\x05\xc9\xb0\xcc\x84\xec\x10\x45\xb9\x82\x83\xa9\x97\x05\x98\x51\x5e\x41\x9c\xaa\xdb\x98\x4a\x00\xf2\x5f\xd8\x04\x1f\x1b\xcb\x5c\xaf\x6b\x7d\x85\xcf\x07\x24\x94\x14\xff\xa9\x63\x29\xa9\xfc\xc9\xdb\xd6\xe6\x87\xb6\x1d\x52\x14\x6e\xc6\x94\x46\x42\xc8\x9e\x1b\x9b\x42\x6b\x99\x9f\x06\x08\x9e\x66\xf3\x06\x84\x13\xcc\xb7\x10\xf2\x63\xef\x39\x13\xcc\x86\x27\xc8\x5b\xf7\x00\x3e\x2a\x4b\xc0\x6c\xb6\x30\xc0\x47\x2c\x5b\x9e\xfb\xab\xcf\xec\xf6\x5d\xa5\xf3\xa6\xbd\x20\x33\x8c\x67\x98\xbb\x4a\xb7\xdb\x8c\xee\x3b\x00\x00\xff\xff\xc0\x80\xef\x61\x33\x02\x00\x00"),
		},
		"/threads.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "threads.tmpl",
			modTime:          time.Date(2019, 11, 18, 15, 7, 0, 20314597, time.UTC),
			uncompressedSize: 763,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\xc1\x6e\xd4\x30\x10\x86\xef\x7e\x0a\x93\x03\xb7\x8d\xd5\x9e\x10\x38\x46\x1c\x39\x20\xa1\x8a\x3b\x1a\x9c\x49\x6c\x75\x6c\x07\xcf\x94\x12\xac\xbc\x3b\x4a\x77\x57\x14\x2a\x2d\xd0\x53\x14\xcf\x7c\xdf\x8c\x7f\xdb\x17\x63\xf1\xb2\x2e\xa8\x83\x24\x72\xca\xee\x1f\x4d\x90\xe7\x01\xb3\x53\x36\xa1\x80\xf6\x01\x2a\xa3\x0c\x77\x32\x1d\x5e\x39\x65\x25\x0a\xa1\xfb\x80\xcc\x30\xa3\xfe\x14\x2a\xc2\xc8\xd6\x1c\x8f\x95\xa5\x98\x6f\x75\x45\x1a\x58\x56\x42\x0e\x88\xa2\x43\xc5\x69\xe8\x5a\x03\x66\x94\x8f\x20\x41\x77\x26\x97\x9a\x80\xe2\x0f\xec\x53\xcc\xbd\x67\xee\xb6\xad\xfb\x0f\x9e\x6f\x91\x50\x4a\x7e\x26\x2e\xc7\xbd\xff\x89\x0c\x22\x0b\xbf\x36\x66\x2a\x59\xb8\x9f\x4b\x99\x09\x61\x89\xdc\xfb\x92\x8c\x67\x7e\x3b\x41\x8a\xb4\x0e\x37\x40\x78\x0f\xeb\x4b\x48\xcb\x9b\x31\xf2\x42\xb0\x0e\x7c\x0f\xcb\x6e\x4f\x10\xb3\xf6\x04\xcc\x83\x2f\x59\x20\x66\xac\x7b\xe0\x57\x4f\x93\x0c\x57\x4e\x59\x46\x2f\xb1\xec\x8f\x10\xae\xdd\xfb\xfc\xa5\x7c\xb7\x26\x5c\x3b\xd5\x9a\x60\x5a\x08\x04\x75\x77\xba\xc3\x67\x8a\x2c\x9d\xee\x1f\xba\xb6\x4d\x59\xf3\x0b\xfe\x4d\x73\x9e\x74\x83\x5f\xef\x90\x85\xff\x6a\x3c\x37\x5e\x92\xbe\xab\x3e\xc4\x6f\x38\x3e\xda\xff\xb2\xf4\x0c\xfc\x21\x35\x7b\x42\x4e\xa9\xd6\x0e\x7a\xc4\x29\xe6\x27\xe4\x61\x27\x0a\x9d\x52\x3c\xd5\xdc\x03\x50\x21\xcf\xa8\xfb\xbd\x81\xa2\x6b\xad\xdf\x36\x6b\x28\x1e\x8b\x98\x8f\xb3\x0a\x3d\xfa\xff\x19\x00\x00\xff\xff\xd0\x66\x00\x96\xfb\x02\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/error.tmpl"].(os.FileInfo),
		fs["/threads.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
