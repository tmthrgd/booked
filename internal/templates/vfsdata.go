// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// FileSystem contains project templates.
var FileSystem = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 11, 18, 15, 34, 35, 923545057, time.UTC),
		},
		"/error.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "error.tmpl",
			modTime:          time.Date(2019, 11, 17, 3, 46, 24, 770694000, time.UTC),
			uncompressedSize: 563,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\xbf\x4e\xc4\x30\x0c\x87\xf7\x3e\x45\xe8\xc0\xc4\xb5\xba\x0d\x41\x52\x06\x66\x24\x04\xbc\x80\x95\xba\x4d\x74\xce\x1f\xc5\xbe\x2b\xa5\xea\xbb\xa3\xde\x89\x81\x8d\x63\x8a\xf2\x59\x9f\x2d\xfb\xa7\x6f\xfa\x64\x65\xce\xa8\x9c\x04\xea\x2a\xbd\x3d\x8a\x20\x8e\x06\x63\x57\xe9\x80\x02\xca\x3a\x28\x8c\x62\x8e\x32\xec\xee\x7f\x60\x84\x80\xe6\xe4\x71\xca\xa9\x88\xb2\x29\x0a\x46\x31\xf5\xe4\x7b\x71\xa6\xc7\x93\xb7\xb8\x3b\x7f\xee\x7c\xf4\xe2\x81\x76\x6c\x81\xd0\xec\xeb\xae\xd2\xe2\x85\xb0\x5b\x96\xe6\x5d\x40\x8e\xfc\x9c\x7a\x5c\x57\xb5\x2c\x4e\x24\x5f\xd0\x07\x7e\x8a\xfa\x55\xd6\xed\xc5\xaa\x34\xf9\x78\x50\x05\xc9\xb0\xcc\x84\xec\x10\x45\xb9\x82\x83\xa9\x97\x05\x98\x51\x5e\x41\x9c\xaa\xdb\x98\x4a\x00\xf2\x5f\xd8\x04\x1f\x1b\xcb\x5c\xaf\x6b\x7d\x85\xcf\x07\x24\x94\x14\xff\xa9\x63\x29\xa9\xfc\xc9\xdb\xd6\xe6\x87\xb6\x1d\x52\x14\x6e\xc6\x94\x46\x42\xc8\x9e\x1b\x9b\x42\x6b\x99\x9f\x06\x08\x9e\x66\xf3\x06\x84\x13\xcc\xb7\x10\xf2\x63\xef\x39\x13\xcc\x86\x27\xc8\x5b\xf7\x00\x3e\x2a\x4b\xc0\x6c\xb6\x30\xc0\x47\x2c\x5b\x9e\xfb\xab\xcf\xec\xf6\x5d\xa5\xf3\xa6\xbd\x20\x33\x8c\x67\x98\xbb\x4a\xb7\xdb\x8c\xee\x3b\x00\x00\xff\xff\xc0\x80\xef\x61\x33\x02\x00\x00"),
		},
		"/message.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "message.tmpl",
			modTime:          time.Date(2019, 11, 18, 15, 42, 42, 887781079, time.UTC),
			uncompressedSize: 1557,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\xc1\x6e\xd4\x30\x10\x86\xef\xfb\x14\xc3\x0a\xa1\x56\xa8\x49\x5b\x2e\xa8\x75\x8c\xa0\x52\x51\x0f\x95\x56\x2d\x70\x77\xed\xd9\x8d\xa9\x63\x47\x99\xd9\x56\x8b\x95\xe7\xe0\x81\x78\x31\xe4\x64\xc3\x6e\x36\x42\xa2\x9c\x92\xfc\xf3\xcd\x1f\xcf\x78\x6c\xf1\xca\x04\xcd\x9b\x1a\xa1\xe4\xca\xc9\x99\x48\x0f\x70\xca\xaf\x0a\xf4\x72\x26\x2a\x64\x05\xba\x54\x0d\x21\x17\x6b\x5e\x9e\xbc\x97\x33\xc1\x96\x1d\xca\x18\xb3\x2f\xe9\xa5\x6d\x45\xde\x2b\x33\xe1\xac\x7f\x84\x06\x5d\x41\xbc\x71\x48\x25\x22\x43\xd9\xe0\xb2\x98\xc7\xa8\x88\x90\x17\x8a\x4b\x98\xe7\x3e\x34\x95\x72\xf6\x07\x66\x95\xf5\x99\x26\x9a\xb7\xed\xfc\x05\xf9\xf4\x88\x0e\x39\xf8\xff\x4c\xaf\x90\x48\xad\xf0\x9f\x32\x4b\xe6\x9a\x2e\xf2\x7c\x19\x3c\x53\xb6\x0a\x61\xe5\x50\xd5\x96\x32\x1d\xaa\x5c\x13\x7d\x58\xaa\xca\xba\x4d\x71\xa7\x1c\x3e\xab\xcd\x1b\x55\xd5\x97\xc6\x52\xed\xd4\xa6\xa0\x67\x55\x27\xf7\x4a\x59\x0f\xda\x29\xa2\x42\x07\xcf\xca\x7a\x6c\x52\xaf\xcf\x46\x4d\x2c\xcf\xe4\x4c\x10\x6a\xb6\x21\xb5\xbe\x3c\x97\x9f\x14\x59\x0d\xf7\xac\x98\x44\x5e\x9e\xcb\x99\x30\x69\x8f\x0c\xcb\x85\x6a\xd8\x6a\x5b\x2b\x9f\x42\x86\x93\x6a\x64\x8c\x0e\x3d\x64\xfb\xc1\x64\x6c\x4c\x9f\x74\xdb\x97\x3d\x4d\x18\x02\xfb\xf0\xa2\x0c\x1c\x46\x68\xd6\x4b\x57\x61\xed\x79\x9f\xfc\x66\x0d\x1e\x90\xbd\x34\x21\x3f\xae\x8d\x0d\x23\xb0\x53\x26\xdc\xe7\x9b\xeb\xb1\x5f\x12\x26\xd4\xb5\x75\xe3\x5a\xb2\x4e\x99\x70\xf7\x6c\xf5\x23\x36\x63\x74\x10\x27\xf4\xc2\x29\x7f\x50\x76\x52\xa6\xae\xa5\x6a\x0e\x7e\xdf\x4b\x13\xf2\x4a\x39\x37\x06\x3b\x65\xcb\xc5\xf8\x6c\xb9\x84\xec\xd6\x12\xa1\xd9\x8f\xc0\x51\x8c\x59\xdb\x42\xd5\x45\x40\xa7\xd0\x71\x8c\xe8\xcd\x1f\xf7\xbc\x9b\x87\x7c\x37\x34\xa3\xf1\x19\xb6\x15\x1e\x36\x70\x8f\xde\x74\x3d\xe8\xc7\xc8\x3e\x6d\xe7\x91\x7a\x5d\x8a\xdc\xd8\xa7\x91\x57\x8c\x27\xd0\x2f\x6d\xe8\x55\xdb\x1e\xfc\x60\xd7\xd9\xce\x35\xb8\xc1\x74\xab\xf7\x26\xaf\x87\x4f\xb8\x28\x20\x6b\xdb\x4e\xb4\x4b\x58\x31\x1c\x75\xe3\x77\x0c\x67\xa7\x5b\x79\xc7\x16\x40\xce\x6a\x84\x0c\x4e\x77\xe1\xae\xf6\xee\xad\x51\x7e\x85\x3b\x3c\x2d\xcd\x59\x29\x6c\xb5\x02\x6a\x74\x3a\xf0\x46\xb1\xea\xce\x7b\xf6\xf5\xee\x26\x9d\x72\xf8\xf5\x33\xf5\x7e\xd8\x1e\x67\xe5\x9e\xa7\xc8\x83\x93\x7f\x5b\x99\xa0\x5a\x0d\x07\xb8\x0a\x0d\xca\xb7\x31\xd2\xfa\x61\x04\x41\x0a\x88\x3c\x91\x63\xdf\x51\x43\xb7\x22\xe9\xc6\xd6\x2c\x9f\x54\x03\xdb\x0d\x80\x02\xd2\x04\xf5\x1f\x6d\x7b\x29\xf2\x2d\x33\xc0\x60\x70\x89\xcd\x50\xdc\xfe\x6d\x66\xde\x75\xd7\xe0\xf7\xfe\x2e\x7b\x41\xe2\x70\x0d\x1e\x66\xfe\x0e\x00\x00\xff\xff\xb0\x5a\x36\x74\x15\x06\x00\x00"),
		},
		"/threads.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "threads.tmpl",
			modTime:          time.Date(2019, 11, 18, 15, 19, 7, 926790519, time.UTC),
			uncompressedSize: 783,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x4f\x6f\xd4\x30\x10\xc5\xef\xfe\x14\x26\x07\x6e\x1b\xab\x3d\x21\x70\x8c\x38\x72\x40\x42\x15\x77\x34\x38\x93\xd8\xea\xd8\x0e\x9e\x29\x25\x44\xfb\xdd\x91\x37\xbb\x50\xa8\x54\xfe\x9c\x46\xb6\xe7\xf7\x66\xfc\x9e\x7d\x36\x16\x2f\xeb\x82\x3a\x48\x22\xa7\x6c\x2b\x9a\x20\xcf\x03\x66\xa7\x6c\x42\x01\xed\x03\x54\x46\x19\xee\x64\x3a\xbc\x70\xca\x4a\x14\x42\xf7\x0e\x99\x61\x46\xfd\x21\x54\x84\x91\xad\xd9\xaf\x95\xa5\x98\x6f\x75\x45\x1a\x58\x56\x42\x0e\x88\xa2\x43\xc5\x69\xe8\xb6\x0d\x98\x51\xde\x83\x04\xdd\x99\x5c\x6a\x02\x8a\xdf\xb0\x4f\x31\xf7\x9e\xb9\x3b\x1e\xbb\x7f\xe0\xf9\x16\x09\xa5\xe4\xff\xc4\x65\xdf\xfb\xaf\xc8\x20\xb2\xf0\x4b\x63\xa6\x92\x85\xfb\xb9\x94\x99\x10\x96\xc8\xbd\x2f\xc9\x78\xe6\xd7\x13\xa4\x48\xeb\x70\x03\x84\xf7\xb0\x3e\x87\xb4\xbc\x1a\x23\x2f\x04\xeb\xc0\xf7\xb0\x34\xf5\x04\x31\x6b\x4f\xc0\x3c\xf8\x92\x05\x62\xc6\xda\x0c\xbf\x7a\xec\x64\xb8\x72\xca\x32\x7a\x89\xa5\x85\x10\xae\xdd\xdb\xfc\xa9\x7c\xb5\x26\x5c\x3b\xb5\x6d\x82\x69\x21\x10\xd4\xdd\xf9\x0f\x1f\x29\xb2\x74\xba\x3f\x75\x1d\x8f\xca\x9a\x9f\xf0\x2f\x32\x97\x49\x37\xf8\xf9\x0e\x59\xf8\x8f\x8a\x97\xc6\xa7\x44\xdf\x54\x1f\xe2\x17\x1c\x1f\xec\xff\xb4\xe8\x05\xf8\x4d\xd4\x34\x87\x9c\x52\xdb\x76\xd0\x23\x4e\x31\x3f\x22\x0f\x8d\x28\x74\x76\xf1\xfc\xe6\x4e\x40\x85\x3c\xa3\xee\x5b\x03\x45\x67\xe1\x47\xe4\x7d\xcb\xf6\x54\xac\x01\x67\x0d\xc5\x1d\xc0\xbc\xcf\x2f\xf4\xe0\xfc\x3d\x00\x00\xff\xff\xad\xf4\xcf\xf9\x0f\x03\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/error.tmpl"].(os.FileInfo),
		fs["/message.tmpl"].(os.FileInfo),
		fs["/threads.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
